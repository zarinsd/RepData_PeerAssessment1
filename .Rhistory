m <- mean(data, ...)
x$setmean(m)
m
}
a<-makeVector (c(1,2,3))
a$get()
a()
mean(a)
cachemean(a)
a$getmean()
makematrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cachesolve <- function(x=matrix(), ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
a<-matrix(1:4,2,2)
cachesolve(a)
a<-makematrix()
a$set(matrix(1:4,2,2))
cachesolve(a)
makeCacheMatrix <- function(x = matrix()) {  ## create function makematrix
m <- NULL                       ## set m to NULL
set <- function(y) {            ## create function set that sets x to argument y and m to NULL declared outside this funciton
x <<- y
m <<- NULL
}
get <- function() x             ## get retuns value of x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m       ## returns value of m from makematrix function
list(set = set, get = get,      ## returns label vector of functions set, get, setmatrix, getmatrix
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {##
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)         ## solves matrix
x$setmatrix(m)
m                               ## returns solved matrix
}
a<-makeCacheMatrix
a<-matrx(1:4,2,2)
a<-matrix(1:4,2,2)
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
a<-makeCacheMatrix
a<-matrix(1:4,2,2)
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
a<-makeCacheMatrix
a<-matrix(1:4,2,2)
cacheSolve(a)
makematrix <- function(x = matrix()) {  ## create function makematrix
m <- NULL                       ## set m to NULL
set <- function(y) {            ## create function set that sets x to argument y and m to NULL declared outside this funciton
x <<- y
m <<- NULL
}
get <- function() x             ## get retuns value of x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m       ## returns value of m from makematrix function
list(set = set, get = get,      ## returns label vector of functions set, get, setmatrix, getmatrix
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cachesolve <- function(x=matrix(), ...) {##
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)         ## solves matrix
x$setmatrix(m)
m                               ## returns solved matrix
}
a<-makematrix
a<-matrix(1:4,2,2)
cachesolve(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
a<-makeCacheMatrix()
a<-matrix(1:4,2,2)
caceSolve(a)
cacheSOlve(a)
cacheSolve(a)
> a<-makematrix()
> a$set(matrix(1:4,2,2))
> cachesolve(a)
a<-makeCacheMatris()
a<-makeCacheMatrix
a$set(matrix(1:4,2,2))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2))
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## This function calculates and returns inverse of the matrix oject created by makeCacheMatrix function abve
cacheSolve <- function(x=matrix(), ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2))
cacheSolve(a)
sample(1:10, replace=TRUE, 4)
sample(1:10, replace=TRUE, 4)
sample(1:10, replace=TRUE, 4)
sample(1:10, replace=TRUE, 7)
sample(1:10, replace=TRUE, 9)
set.seed(1)
rpois(5, 2)
rnorm(10)
install.packages("RMySQL")
install.packages (‘RMySQL’, type = ‘source’);
install.packages (‘RMySQL’, type = ‘source’)
install.packages ("RMySQL", type = ‘source’)
install.packages ("RMySQL", type = "source")
library(RMySQL)
library(RMySQL)
library(DBI)
library(RMySQL)
install.packages('RMySQL',type='source')
library(RMySQL)
library(DBI)
Sys.getenv('MYSQL_HOME')
Rhome()
R.home()
Sys.getenv('MYSQL_HOME')
ys.getenv('MYSQL_HOME')
Sys.getenv('MYSQL_HOME')
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
library(RMySQL)
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
library(BIN)
library("BIN")
library(RMySQL)
Sys.getenv('MYSQL_HOME')
R.home()
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
library(RMySQL)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv("path2.csv", stringsAsFactors = FALSE)
read.csv("path2csv", stringsAsFactors = FALSE)
?read.csv
read.csv(path2csv, stringsAsFactors = FALSE)
mydf = read.csv(path2csv,stringsAsFactors = FALSE)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dyplyr)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
print(tbl_df)
print("tbl_df")
print(cran)
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:50
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Compariosn
?Comparison
filter(cran, r_version <= "3.0.2", country == "India")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US"  | country == "IN")
filter(cran, country == "US"  | country == "IN", size >= 100500)
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, version!=is.na())
filter(cran, version==!is.na())
filter(cran, !is.na(version))
filter(cran, !is.na(r_version))
cran2 = select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- filter(cran, ip_id, package, size)
cran3 <- filter(cran, ip_i)
cran3 <- filter(cran, ip_id)
cran3 <- filter(cran, -ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gm = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct size = size_mb-1)
mutate(cran3, correct_size = size_mb-1)
mutate(cran3, correct_size = size-1000.)
mutate(cran3, correct_size = size+1000.)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package,mean(size))
submit()
sybmit()
submit()
avg_bytes = mean(size))
submit()
?n
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
summarize(by_package)
summarize(by_package, count=n())
summarize(by_package, uniqe=ndisctinct(ip_dp)
summarize(by_package, uniqe=n_disctinct(ip_dp)
summarize(by_package, uniqe=n_disctinct(ip_dp))
?n+disctinct
?n_disctinct
?n_distinct
summarize(by_package, uniqe=n_distinct(ip_dp))
summarize(by_package, uniqe=n_distinct(ip_ip))
summarize(by_package, uniqe=n_distinct(ip_id))
countries = n_distinct(country)
head(by_package)
countries = n_distinct(country)
avg_bytes = mean(size)
unique = n_distinct(ip_id)
summarize(by_package, countries = n_distinct(country))
summarize(by_package, avg_bytes = mean(size))
submit()
submit()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
head(top_counts, 20)
arrange(top_counts, decs(count))
arrange(top_counts, count)
arrange(top_counts, desc(count))
quantile(pack_sum$unique,
| probs = 0.99)
quantile(pack_sum$unique,probs = 0.99)
top_unique < - filter(pack_sum, unique >465)
top_unique <- filter(pack_sum, unique >465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tydir)
library(tidyr)
students
?gather
gather(students, sex,count-grade)
gather(students, sex,count,-grade)
students2
res <- gather(students2, key= sex_class, value=count)
res <- gather(students2,sex_class, count)
res <- gather(students2,sex, count)
res <- gather(students2, sex, count)
res <- gather(students2, sex, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
seperate(data = res, col = sex_class, into = c("sex", "class"))
seperate(res,sex_class, into = c("sex", "class"))
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
submit()
submit()
submit()
submit()
reset()
submit()
student3
students3
submit()
submit()
?spread
submit()
submit()
submit()
extract_numeric("class5")
?mutate
library(dplyr)
?mutate
submit()
submit()
submit()
submit()
submit()
reset()
submit()
submit()
submit()
submit()
reset()
submit()
submit()
submit()
submit()
submit()
students3
submit()
submit()
submit()
submit()
submit()
submit()
students4
submit()
submit()
?nique
?unique
submit()
student_info
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
passed=mutate(passed)
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
rbind_list(passed,failed)
sat
submit()
submit()
unzip("activity.zip")
wd
getwd()
setwd("C:/Users/Davis/Desktop/RepData_PeerAssessment1")
getwd()
unzip("activity.zip")
activity<-read.csv("activity.csv", colClasses = c("numeric", "character","numeric"))
